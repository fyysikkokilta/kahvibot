#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Small python script for running a Telegram bot which takes a picture with a
webcam on certain commands or keywords.

Uses the python-telegram-bot library.
"""
#TODO: put image file in static path and host it so it can be accessed via an external API

from typing import Optional

import subprocess

import re

import logging
import logging.handlers

from tempfile import NamedTemporaryFile

from io import BytesIO

from PIL import Image

from telegram import (
    Update,
    Bot,
)

from telegram.utils.request import Request

from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    Filters,
)

from telegram.constants import CHATACTION_UPLOAD_PHOTO


from config import (
    bot_token,
    admin_username,
    camera_dimensions,
    watermark_path,
    trigger_words,
)

logger = logging.getLogger("kahvibot")
log_handler = logging.handlers.SysLogHandler(address="/dev/log")
log_handler.setFormatter(logging.Formatter("%(module)s[%(process)s]: %(message)s"))
logger.addHandler(log_handler)
logger.setLevel(logging.INFO)

help_text_fmt = """
Komennot / commands:
/status - Näytä kahvin määrä kiltiksellä tällä hetkellä / Show the current amount of coffee at the guild room
/help - Näytä tämä viesti / Show this message

Onko jokin vialla? Onko sinulla parannusehdotus? Ota yhteyttä ylläpitäjään {0}.
Is something wrong? Do you have a feature request? Contact the administrator {0}.
"""


class CustomBot(Bot):
    """
    Simple custom telegram bot class with some extra attributes.
    """
    def __init__(self,
        admin_username: str,
        watermark_path: str = "",
        **kwargs
    ):

        super().__init__(**kwargs)

        # prepend '@' if applicable
        if not admin_username.startswith("@"):
            admin_username = "@" + admin_username

        self.admin_username = admin_username
        self.help_text = help_text_fmt.format(admin_username)

        self.watermark: Optional[Image] = None
        if watermark_path:  # don't add watermark if the path is empty
            self.watermark = Image.open(watermark_path)
            logger.info(f"Using watermark {watermark_path}")
            if self.watermark.size != camera_dimensions:
                logger.warning(f"Warning: watermark size is different from camera size: {self.watermark.size} vs {camera_dimensions}")


def send_help(update: Update, ctx: CallbackContext):
    msg = update.message
    if msg:
        msg.reply_text(ctx.bot.help_text)


def take_picture() -> Image:
    """
    Take picture from webcamera using the fswebcam command and return it as a
    pillow image.
    """
    with NamedTemporaryFile(suffix=".jpg") as f:
        # Use the option "-S 20" to discard 20 frames before taking the picture,
        # so that the camera has time to adjust the brightness automatically.
        # This takes ~1-2s, the camera usually does 10-20fps.
        # Use --no-banner to not put a banner on the picture, which fswebcam
        # does by default for some reason.

        #NOTE: fswebcam v 20140113 (available on Debian 11 Bullseye) doesn't
        # return nonzero exit status on error... so we will get an exception
        # from the Image.open() call below if taking the picture fails, even
        # with check=True ...
        w, h = camera_dimensions
        subprocess.run(["fswebcam", "--quiet", "-S", "20", "--no-banner", "--resolution", f"{w}x{h}", f.name], check=True)
        img = Image.open(f.name)
    return img


def send_webcam_photo(update: Update, ctx: CallbackContext):
    bot = ctx.bot

    update.message.reply_chat_action(action=CHATACTION_UPLOAD_PHOTO)

    img = take_picture()

    if bot.watermark is not None:
        # Use the watermark image as the mask as well, so it's alpha channel is
        # used. See the the pillow Image.paste() docs for details.
        img.paste(bot.watermark, mask=bot.watermark)

    # img.tobytes() didn't work for some reason, so using BytesIO.
    # see https://stackoverflow.com/a/54165463
    bio = BytesIO()
    bio.name = "image.jpg"
    img.save(bio, "JPEG")
    bio.seek(0)
    msg = update.message
    if msg:
        msg.reply_photo(bio)


def error_callback(update, context):
    logger.error("Caught exception")
    logger.error("", exc_info=True)


if __name__ == "__main__":
    import argparse

    logging.basicConfig(level=logging.INFO)

    if not bot_token:
        raise ValueError("Telegram bot token not provided (did you set it in the configuration?)")
    if not admin_username:
        raise ValueError("admin_username not defined in config file.")

    # initialize custom bot class
    bot = CustomBot(
        admin_username=admin_username,
        token=bot_token,
        watermark_path=watermark_path,
        # this gets rid of some warnings (and maybe connection problems?)
        request=Request(con_pool_size=8),
    )
    updater = Updater(bot=bot, use_context=True)

    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", send_help))
    dispatcher.add_handler(CommandHandler("help", send_help))
    dispatcher.add_handler(CommandHandler("status", send_webcam_photo))
    trigger_words_regex = re.compile("|".join(trigger_words), re.IGNORECASE)
    dispatcher.add_handler(MessageHandler(Filters.text & Filters.regex(trigger_words_regex), send_webcam_photo))
    dispatcher.add_error_handler(error_callback)

    # NOTE: when the raspi reboots, start_polling fails with a name resolution
    # error even with bootstrap_retries=-1 for some reason. After a lot of
    # troubleshooting, we ended up just configuring the systemd to restart the
    # service automatically, see setup.py.
    updater.start_polling(drop_pending_updates=True, bootstrap_retries=-1)
    updater.idle()
