#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Program that operates a Telegram bot which can tell if there is coffee based on
the entries in the database that the other

Based on telepot (https://github.com/nickoala/telepot).
"""

import telepot
import telepot.loop
import config, db
import sys, time, syslog, signal
import os

#TODO: remove when applicable
import cv2
import tempfile

try:
  import matplotlib
  matplotlib.use("Agg") # has to be before other matplotlib imports to enable "headlessness"
  import matplotlib.pyplot as plt
  from matplotlib.dates import DateFormatter
  import datetime
except ImportError:
  # mark that matplotlib is not available
  plt = False

"""
A thin wrapper class for telepot, keeps a database manager instance open to
query the db.
"""
class KahviBot():
  def __init__(self, config_dict = None):

    if config_dict is None:
      config_dict = config.get_config_dict()

    telegram_config = config_dict["telegram"]

    # bind handling of SIGTERM to the appropriate function.
    signal.signal(signal.SIGTERM, self.handle_sigterm)

    self.poll_interval = float(config_dict["general"]["poll_interval"])
    self.max_ncups = float(config_dict["calibration"]["max_ncups"])

    bot_token = telegram_config["bot_token"]
    if not bot_token:
      raise ValueError("Telegram bot token not provided (did you set it in the configuration?)")

    try:
      self.admin = telegram_config["admin_username"]
    except KeyError:
      raise ValueError("Telegram bot administrator not provided in config.")
    if not self.admin[0] == "@":
      raise ValueError("Invalid admin username.")

    self.bot_token = bot_token
    self.bot = telepot.Bot(self.bot_token)

    self.dbManager = db.DatabaseManager(config_dict)

    self.plot_length = float(telegram_config["plot_length"])
    if not plt:
      syslog.syslog(syslog.LOG_WARNING, "kahvibot: Plotting not available.")

    self.data_unavailable_threshold = float(telegram_config["data_unavailable_threshold"])
    self.group_trigger_threshold = int(telegram_config["group_trigger_threshold"])
    self.group_sizes = dict() # dict containing sizes of groups

    #TODO: remove
    syslog.syslog(syslog.LOG_INFO, "kahvibot: initializing webcamera")
    self.camera = cv2.VideoCapture("/dev/video0")
    for i in range(50): self.camera.grab()

    # TODO: move this to sensor
    self.watermark = None
    try:
      # watermark file path is relative to script folder
      watermark_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                    telegram_config["watermark_file"])
      self.watermark = cv2.imread(
          watermark_path,
          cv2.IMREAD_UNCHANGED # read alpha channel also
          )
      if self.watermark is None:
        raise KeyError

    except KeyError as e:
      syslog.syslog(syslog.LOG_INFO, "kahvibot: watermark not found")

    # flush messages on startup.
    self.flush_messages()

    telepot.loop.MessageLoop(self.bot, self.handle_message).run_as_thread()
    # TODO: separate functions for handling message types
    # see: https://telepot.readthedocs.io/en/latest/reference.html#message-loop-and-webhook
    #telepot.loop.MessageLoop(self.bot, {"chat": self.handle_chat_message, "group": self.handle_group_message).run_as_thread()

    syslog.syslog(syslog.LOG_INFO, "kahvibot: Listening for Telegram messages.")

  """
  Flush messages in the update queue. Useful when the bot has been offline.
  """
  # TODO: notify users if their messages were flushed...
  def flush_messages(self):
    updates = self.bot.getUpdates()
    while updates:
      syslog.syslog(syslog.LOG_INFO, "kahvibot: Flushing {} messages.".format(len(updates)))
      # we assume that between here there's been no messages...
      updates = self.bot.getUpdates(updates[-1]["update_id"] + 1)

  """
  Send a message and log it to the syslog.

  Params:
    chat_id: chat ID to send the message to
    msg_from: the dictionary given by Telepot.Message["from"]
    message: The message content to send.  Can be e.g. text or an image file
      handle.
    log_msg: The string that will be printed to the syslog. If it includes '{}',
      the recipient will be added to itusing str.format().
    send_fun: The function to use for sending (i.e. bot.sendMessage or
      bot.sendPhoto). Default is self.bot.sendMessage (text)
    **kwargs: these are passed onto send_fun
  """
  def send_and_log(self, chat_id, msg_from, message, log_msg = None,
                   send_fun = None, **kwargs):
    first = last = uname = ""

    if send_fun is None:
      send_fun = self.bot.sendMessage

    try:
      first = msg_from["first_name"]
    except KeyError:
      pass
    try:
      last = msg_from["last_name"]
    except KeyError:
      pass
    try:
      uname = msg_from["username"]
    except KeyError:
      pass

    send_fun(chat_id, message, **kwargs)

    if log_msg is None:
      log_msg = "sent "
      if send_fun == self.bot.sendMessage:
        log_msg += "text "
      elif send_fun == self.bot.sendPhoto:
        log_msg += "photo "

      log_msg += "message to {}."

    # the string to be insterted into log_msg format
    log_msg_recipient = ""
    if first:
      log_msg_recipient += first + " "
    if last:
      log_msg_recipient += last + " "
    if uname:
      log_msg_recipient += "({}) ".format(uname)

    log_msg_recipient = log_msg_recipient.strip()

    if first or last or uname:
      log_msg_recipient += ","

    log_msg_recipient += " chat ID {}".format(chat_id)

    log_msg = "kahvibot: " + log_msg.format(log_msg_recipient)

    syslog.syslog(syslog.LOG_INFO, log_msg)

  """
  Keep the program running (see: https://telepot.readthedocs.io/en/latest/),
  not entirely sure if this is absolutely the best option, but going by the
  example here.
  """
  def run(self):
    try:
      while True:
        time.sleep(10)

    # handle manual stop
    except KeyboardInterrupt:
      self.handle_sigterm()

  """
  The function for handling telegram messages.

  TODOs / ideas:
  respond in english if the message is in english
  check if the coffee has been sitting over the night / if it's fresh
  move message handling / message contents to separate file(s), implement a
    dictionary structure or something
  handle /commands separately
  /plot command (?)
  proper /start message
  structure this function better, now everything is a mess of if-elses...
  handle inline messages (?)
  push notifications when there is coffee?
  if multiple people are asking if there is coffee but there isn't any, tell
    them to make some
  """
  def handle_message(self, msg):
    content_type, chat_type, chat_id = telepot.glance(msg)
    msg_from = msg["from"]
    bot_username = self.bot.getMe()["username"]
    reply_to = None
    bot = self.bot

    isGroup = chat_type in ["group", "supergroup"]

    if content_type in [
        "new_chat_member",
        "left_chat_member",
        "new_chat_members",
        ]:
      # update group size
      self.group_sizes[chat_id] = bot.getChatMembersCount(chat_id)

    if content_type != "text":
      return

    text = msg["text"]

    # if we are in a group, make sure that we are being talked to.
    # this removes the @bot_username from the end of the command
    try:
      command, command_target_username = text.split("@")
      command = command.strip();
      command_target_username = command_target_username.strip()

      if (isGroup and
          # is the command aimed at someone else?
          (len(command.split()) == 1 and
          len(command_target_username.split()) == 1) and
          command_target_username.lower() != bot_username.lower()
          ):
        # We are in a group but the command is not aimed at us. Return.
        return

    except ValueError:
      # if the message starts with '/' but isn't of the form foo@bar and we are in a group, assume that there's no command.
      if text[0] == "/" and not isGroup:
        command = text
      else:
        command = None

    group_size = 0
    if isGroup:
      # if we are in a group, reply to the person who sent the command
      reply_to = msg["message_id"]

      # figure out group size
      if not chat_id in self.group_sizes:
        group_size = bot.getChatMembersCount(chat_id)
        self.group_sizes[chat_id] = group_size
      else:
        group_size = self.group_sizes[chat_id]

    # TODO: make not hardcoded?
    trigger_words = [
        "kahvi",
        "\u2615",
        "kahavi",
        #"sima", # wappu mode
        #"tsufe", # NOTE: in the case of tsufeBot, this may trigger even if the bot is only tagged, good idea?
        ]
    trigger_word_found = any(w in text.lower() for w in trigger_words)

    if ((trigger_word_found and group_size <= self.group_trigger_threshold)
        or
        command == "/status"
        ):

      #TODO: implement
      #self.reply_current_coffee_amount(chat_id, msg_from, reply_to)
      #return
      command = "/totuus"

    if command == "/plot":
      self.reply_plot(chat_id, msg_from, reply_to)
      return

    if command == "/help": # or command == "/start": #TODO
      self.reply_help(chat_id, msg_from, reply_to = reply_to)
      return

    if command == "/totuus":
      self.reply_current_coffee_picture(chat_id, msg_from, reply_to)
      return

  """
  Reply to the user with a help text.
  """
  def reply_help(self, chat_id, msg_from, reply_to = None, lang = "fi"):
    #TODO: language support....
    help_txt = """Komennot:
/status - Kerro kahvin määrä kiltiksellä tällä hetkellä.
/plot - Näytä kahvin määrä kiltiksellä viimeisen tunnin ajalta.
/help - Näytä tämä viesti.

Onko raportoitu kahvin määrä väärin? Onko jokin muu pielessä? Onko sinulla parannusehdotus? Ota yhteyttä ylläpitäjään {}.""".format(self.admin)

    self.send_and_log(chat_id, msg_from, help_txt,
                      log_msg = "sent help message to {}.",
                      reply_to_message_id = reply_to
                      )
    pass

  """
  This function gets called if an user has asked for the amount of coffee in
  the coffee maker right now. It figures out the amount of coffee and sends the
  appropriate response.
  """
  #TODO: handle language...
  def reply_current_coffee_amount(self, chat_id, msg_from, reply_to = None, lang = "fi"):
    reply = None

    latest_measurement = self.dbManager.query_latest()
    if (
        latest_measurement is None or
        time.time() - latest_measurement["timestamp"] > self.data_unavailable_threshold
        ):

      # TODO: implement this language dictionary thing (for other branches as well...)
      #reply = replies[lang]["dataNotAvailableMessage"]
      reply = "Mittausdataa ei valitettavasti ole saatavilla."

    else:
      # TODO: check for stale coffee
      #isStale = self.dbManager.query_stale_coffee()
      #if isStale: ....
      if latest_measurement["isCoffee"]:
        nCups = round(latest_measurement["nCups"])
        if nCups == 0:
          #TODO: consider something like 'keitäthän lisää!' after this...
          reply = "Kiltiksellä on vajaa kupillinen kahvia."
        else:
          reply = "Kiltiksellä on noin {} kuppi{} kahvia! \u2615".format(nCups, "a" if nCups > 1 else "")
      else:
        reply = "Kiltiksellä ei valitettavasti ole kahvia."
        # TODO: if many people ask for coffee, ask users to make some
        #if self.no_asked_for_coffee > self.ask_threshold:
        #  reply += " Sen perään on kysellyt viimeaikoina sinun lisäksesi {} muuta käyttäjää. Ehkä olisi aika keittää uusi pannu?".format(self.no_asked_for_coffee)
        #  # TODO: reset this counter when new coffee has been made
        #  self.no_asked_for_coffee += 1

    self.send_and_log(chat_id, msg_from, reply,
                      log_msg =  "sent amount of coffee to {}.",
                      reply_to_message_id = reply_to)

  """
  Send a picture taken using the web camera.
  """
  def reply_current_coffee_picture(self, chat_id, msg_from, reply_to):
    error_msg = "Mittausdataa ei valitettavasti ole saatavilla."

    self.bot.sendChatAction(chat_id, "typing")

    with tempfile.NamedTemporaryFile(suffix = ".jpg") as f:
      #cap = cv2.VideoCapture("/dev/video0") #TODO: take picture from db instead of directly using opencv here...
      # flush camera buffer
      #t = time.time()
      for i in range(10): self.camera.grab()
      ret, img = self.camera.read()
      #while time.time() - t < 0.05: # very hacky way to flush buffer....
      #  t = time.time()
      #  ret, img = self.camera.read()

      if not ret or img is None:
        # taking picture failed
        self.send_and_log(chat_id, msg_from, error_msg, reply_to_message_id = reply_to)
        f.close()
        return

      # add watermark
      # TODO: move to sensor driver
      if self.watermark is not None:
        try:
          wm = self.watermark
          assert wm.shape[-1] == 4 # check alpha channel

          offset_xy = (0, 0) # offset measured from top right corner

          wh, ww = wm.shape[:2] # watermark dimensions
          if wm.shape[:2] != img.shape[:2]:
            x1, x2 = -(ww + offset_xy[0]), -offset_xy[0]
            y1, y2 = offset_xy[1], wh + offset_xy[1]
          else:
            x1, y1 = (0, 0)
            y2, x2 = img.shape[:2]

          # normalized alpha channel
          a = (wm[..., -1] / 255.0)[..., None] # None == np.newaxis, makes shape correct
          #a *= 0.5 # make watermark translucent TODO: make configurable?

          # imprint watermark
          img[y1:y2, x1:x2] = a * wm[..., :3] + (1 - a) * img[y1:y2, x1:x2]

        except AssertionError:
          syslog.syslog(syslog.LOG_DEBUG,
              "kahvibot: no alpha channel found in watermark"
              )


      ret = cv2.imwrite(f.name, img)

      if not ret:
        # writing image to temp file failed
        self.send_and_log(chat_id, msg_from, error_msg, reply_to_message_id = reply_to)
        f.close()
        return

      f.seek(0)

      self.send_and_log(chat_id, msg_from, f,
                        log_msg = "sent image to {}.",
                        send_fun = self.bot.sendPhoto,
                        reply_to_message_id = reply_to)

      f.close()


  """
  Send a reply containing a plot of recent coffee measurements. If matplotlib
  is not available, reply with a message saying so.
  This assumes that nCups is available in the database.
  """
  def reply_plot(self, chat_id, msg_from, reply_to = None, lang = "fi"):
    # This will be sent as a reply if something is wrong.
    error_msg = u"Kuvaajien piirtäminen ei valitettavasti onnistu tällä hetkellä."

    self.bot.sendChatAction(chat_id, "typing")

    if not plt:
      #TODO: language integration (?)
      self.send_and_log(chat_id, msg_from, error_msg, reply_to_message_id = reply_to)
      return

    t = time.time()
    data = self.dbManager.query_range(
        (t - self.plot_length * 60, t),
        projection = {"_id" : False, "nCups": True, "timestamp": True}
        )

    if data.count() < 2:
      self.send_and_log(chat_id, msg_from, error_msg, reply_to_message_id = reply_to)
      return


    # TODO: does this looping twice and rewinding cause issues with performance?
    x = [datetime.datetime.fromtimestamp(d["timestamp"]) for d in data]
    data.rewind()
    y = [d["nCups"] for d in data]

    fig = plt.figure()
    ax = fig.gca()
    ax.plot(x, y)

    # TODO: make plots prettier
    # TODO: latex stuff ? (might be a hassle if tex isn't installed)

    ax.xaxis.set_major_formatter(DateFormatter("%H:%M"))

    ax.set_xlabel(u"Klo")
    ax.set_ylabel(u"Kahvikuppia")
    ax.grid("on", linestyle = ":")
    fig.suptitle(u"Kahvin määrä") #, fontsize = ???)

    ax.set_ylim((- 0.02 * self.max_ncups, self.max_ncups * 1.02))

    with tempfile.TemporaryFile(suffix = ".png") as f:

      plt.savefig(f)

      f.seek(0)

      self.send_and_log(chat_id, msg_from, f,
                        log_msg = "sent plot to {}.",
                        send_fun = self.bot.sendPhoto,
                        reply_to_message_id = reply_to)

    # close the figure to not take up memory.
    plt.close(fig)


  """
  Function that gets executed upon exit (when systemd sends a SIGTERM). Handles
  closing of db connections etc. (if necessary).
  """
  def handle_sigterm(self, *kwargs):
    syslog.syslog(syslog.LOG_INFO, "kahvibot: Exiting.")

    #TODO
    self.camera.release()

    sys.exit(0)


if __name__ == "__main__":
  import argparse

  syslog.openlog("kahvibot", syslog.LOG_PID)

  ap = argparse.ArgumentParser(description = "Run a telegram bot that tells how much coffee there is.")

  ap.add_argument("-c", "--config",
      dest = "config_file",
      help = "Use CONFIG_FILE as the configuration file instead of the default."
      )

  args = ap.parse_args()

  cfg_dict = config.get_config_dict(args.config_file)

  kb = KahviBot(cfg_dict)

  # this will loop forever.
  kb.run()
