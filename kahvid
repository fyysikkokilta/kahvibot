#!/usr/bin/env python3

"""
The main measurement program, responsible for polling the sensor periodically 
and inserting the results into a database. 

Must be run as root (to access the GPIO and to create a PID file).
"""

#import db, sensor, config
import config
import sys
import threading

import signal
import os, time
import syslog

import sensor as sensorPackage

"""
The main function, containing an infinite loop that polls the sensor 
periodically as specified by poll_interval in the config and writes the results
to a database.
"""
# TODO: see https://stackoverflow.com/questions/13069634/python-daemon-and-systemd-service
def main(config_dict = None):

  if config_dict is None:
    config_dict = config.get_config_dict()

  #db_path = config_dict["paths"]["db_path"]
  paths = config_dict["paths"]

  os.chdir(paths["root"])

  # TODO: verify that this is the signal that systemd / kill sends
  signal.signal(signal.SIGTERM, handle_sigterm)

  sensor = sensorPackage.Sensor(config_dict)

  poll_interval = int(config_dict["general"]["poll_interval"])

  syslog.syslog(
      syslog.LOG_INFO, 
      "Poll interval: {} s, averaging time: {} s.".format(
        poll_interval, sensor.averaging_time
        )
      )

  # the time it took to start the measurement thread,
  # used in an attempt to minimize clock error.
  delta_t = 0

  # the thread handling sensor polling and database writing.
  # its value is set in the loop below.
  thread = None

  with open("test.txt", "a") as f:
    syslog.syslog(syslog.LOG_INFO, "pwd: {}".format(os.getcwd()))
    while True:

      # if the previous measurement is in progress, skip a measurement. 
      # shouldn't be a problem if the difference between poll_interval and
      # averaging_time is sufficiently large.
      if thread is not None and thread.is_alive():
        syslog.syslog(syslog.LOG_WARNING, "Sensor was busy, skipping poll.")
        pass
      else:
        delta_t = -1 * time.time()
        thread = threading.Thread(
              target = write_record,
              args = [sensor, f] # TODO: db instead of f
            )
        thread.start()
        delta_t += time.time()

        time.sleep(poll_interval - delta_t)


"""
Function that does everything necessary (closing db connections etc.) before 
exiting.
"""
def handle_sigterm(*kwargs):
  syslog.syslog(syslog.LOG_INFO, "caught sigterm: " + str(kwargs))
  syslog.syslog(syslog.LOG_INFO, "Exiting.")

  #TODO: close all files and disconnect db etc.
  #os.kill(pidfile_path, signal.SIGTERM)
  #raise Exception
  sys.exit(0)

"""
This function polls the sensor and writes the result to the database using 
the given db_conection. The function is supposed to be called in its own 
thread so the timing of poll intervals doesn't get messed up.
"""
# TODO: better name
# TODO: change handling of db_connection to an actual database connection instead of file...
def write_record(sensor, db_connection):
  # TODO: overwritten averaging_time is for testing only, remove that.
  #poll_result = sensor.poll()
  poll_result = sensor.poll(averaging_time = 1)

  t = time.time()

  #TODO: replace with actual db stuff...
  db_connection.write("{} {}\n".format(t, poll_result))

  # TODO: this only applies to text files, remove...
  # https://stackoverflow.com/questions/19756329/can-i-save-a-text-file-in-python-without-closing-it
  db_connection.flush(); os.fsync(db_connection)


if __name__ == "__main__":

  import argparse

  parser = argparse.ArgumentParser("Main script for coffee measurement daemon.")

  parser.add_argument("-c", "--config", 
      dest = "config_path", default = None, 
      action="store",
      help = "Read configuration file from CONFIG_PATH instead of the default."
      )

  args = parser.parse_args()

  config_dict = None

  if args.config_path:
    config_dict = config.get_config_dict(args.config_path)

  main(config_dict = config_dict)
