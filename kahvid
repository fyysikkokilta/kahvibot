#!/usr/bin/env python3

"""
The main measurement program, responsible for polling the sensor periodically 
and inserting the results into a database. 

Must be run as root (to access the GPIO and to create a PID file).
"""

import sys, os, time
import syslog
import signal
import db
import config
import sensor as sensorPackage

"""
The main function, containing an infinite loop that polls the sensor 
periodically as specified by poll_interval in the config and writes the results
to a database.
"""
def main(config_dict = None):

  if config_dict is None:
    config_dict = config.get_config_dict()

  # bind handling of SIGTERM to the appropriate function.
  signal.signal(signal.SIGTERM, handle_sigterm)

  # set up sensor instance and poll intervals
  sensor = sensorPackage.Sensor(config_dict)
  poll_interval = float(config_dict["general"]["poll_interval"])
  syslog.syslog(
      syslog.LOG_INFO, 
      "Poll interval: {} s, averaging time: {} s.".format(
        poll_interval, sensor.averaging_time
        )
      )

  # create a db manager instance
  dbManager = db.DatabaseManager(config_dict)

  syslog.syslog(syslog.LOG_INFO, "Starting measurements.")

  # wait until the clock is even (with regard to the poll interval)
  time.sleep(poll_interval - (time.time() % poll_interval))

  while True:

    t = time.time()

    data = sensor.poll()

    data["timestamp"] = time.time() #TODO: this or starting time?

    if sensor.is_dummy:
      # tag the data as dummy
      data[db.DUMMY_TAG] = True

    dbManager.insert_data(data)

    # if polling took longer than expected (for whatever reason), warn.
    if t - time.time() > poll_interval:
      syslog.syslog(syslog.LOG_WARNING, "WARNING: poll took longer than poll_interval.")

    # wait for the next cycle.
    time.sleep(poll_interval - (time.time() % poll_interval))


"""
Function that does everything necessary (closing db connections etc.) before 
exiting.
"""
def handle_sigterm(*kwargs):

  syslog.syslog(syslog.LOG_INFO, "Cleaning up GPIO...")
  sensorPackage.GPIO.cleanup()

  syslog.syslog(syslog.LOG_INFO, "Exiting.")

  sys.exit(0)


if __name__ == "__main__":

  import argparse

  parser = argparse.ArgumentParser("Main script for coffee measurement daemon.")

  parser.add_argument("-c", "--config", 
      dest = "config_path", default = None, 
      action="store",
      help = "Read configuration file from CONFIG_PATH instead of the default."
      )

  args = parser.parse_args()

  config_dict = None

  if args.config_path:
    config_dict = config.get_config_dict(args.config_path)

  main(config_dict = config_dict)
