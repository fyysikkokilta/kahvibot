#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Small python script for running a Telegram bot which takes a picture with a
webcam on certain commands or keywords.

Uses the python-telegram-bot library.
"""
#TODO: put image file in static path and host it so it can be accessed without telegram

import logging
import logging.handlers

from telegram.ext import Updater, CommandHandler, MessageHandler

from config import (
    bot_token,
    admin_username,
)

logger = logging.getLogger("kahvibot")
log_handler = logging.handlers.SysLogHandler(address="/dev/log")
log_handler.setFormatter(logging.Formatter("%(module)s[%(process)s]: %(message)s"))
logger.addHandler(log_handler)
logger.setLevel(logging.INFO)

#TODO: watermark feature (see https://stackoverflow.com/questions/43708681/pil-png-image-as-watermark-for-a-jpg-image)
#try:
#  from PIL import Image
#except ImportError:
#  logger.warning("Could not import PIL, watermark feature is not available")
#  Image = None

help_text_fmt = """
Komennot / commands:
/status - Näytä kahvin määrä kiltiksellä tällä hetkellä / Show the current amount of coffee at the guild room
/help - Näytä tämä viesti / Show this message

Onko jokin vialla? Onko sinulla parannusehdotus? Ota yhteyttä ylläpitäjään {0}.
Is something wrong? Do you have a feature request? Contact the administrator {0}.
"""

def send_and_log(update, context, log_msg = None,
                 log_fun=logger.info,
                 **kwargs):

    context.bot.send_message(chat_id=update.effective_chat.id, **kwargs)

    if log_msg is not None:
        log_fun(log_msg)

def format_log_message(fmt_str, update) -> str:
    m = update.message
    info = ""
    if m and m.from_user:
        u = m.from_user
        if u.full_name:
            info += u.full_name
        if u.username:
            info += " ({})".format(u.username)

    return fmt_str.format(info)

def send_help(update, context):
    #context.bot.send_message(chat_id=update.effective_chat.id, )

    log_msg = format_log_message("Sent help to {}", update)
    send_and_log(update, context, log_msg=log_msg, text=context.bot.help_text)


def send_webcam_photo(update, context, watermark = None):
    raise Exception("foo")


def error_callback(update, context):
    logger.error("Caught exception")
    logger.error("", exc_info=True)

def flush_messages(update, context):
    pass

if __name__ == "__main__":
    import argparse

    logging.basicConfig(level=logging.INFO)

    if not bot_token:
        raise ValueError("Telegram bot token not provided (did you set it in the configuration?)")
    if not admin_username:
        raise ValueError("admin_username not defined in config file.")

    # prepend '@' if applicable
    admin_username_with_at = ("@" if not admin_username.startswith("@") else "") + admin_username

    updater = Updater(token=bot_token, use_context=True)

    dispatcher = updater.dispatcher
    #TODO: adding attributes like this is deprecated...
    dispatcher.bot.admin_username = admin_username_with_at
    dispatcher.bot.help_text = help_text_fmt.format(admin_username_with_at)

    dispatcher.add_handler(CommandHandler("start", send_help))
    dispatcher.add_handler(CommandHandler("help", send_help))
    dispatcher.add_handler(CommandHandler("status", send_webcam_photo))
    dispatcher.add_error_handler(error_callback)

    updater.start_polling(clean=True)
